{{- if .Values.global.batch.enabled -}}
{{- $docgenDockerImage:= include "getBatchDocgenDockerImage" . -}}
{{- $schedule := default "20 * * * *" .Values.schedule.cleanup -}}
{{- $containerName := "batch" -}}
{{- $podName := "cleanupCron" -}}

{{- if include "hasCapability" (dict "dot" . "capability" "batch/v1/CronJob") }}
apiVersion: batch/v1
{{ else }}
apiVersion: batch/v1beta1
{{ end }}
kind: CronJob
metadata:
  name: {{.Release.Name}}-batch-cleanup-cron
  {{- include "namespaceMetadata" . | nindent 2 }}
  labels:
{{ include "getExtraResourceLabels" (dict "dot" . "typeLabel" "cronJob") | nindent 4 }}
{{- if .Values.global.azure.keyVault.enabled }}
    azure.workload.identity/use: 'true'
{{- end }}
  annotations:
{{ include "getExtraResourceAnnotations" (dict "dot" . "typeLabel" "cronJob") | nindent 4 }}
spec:
  schedule: {{ $schedule | quote }}
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        metadata:
{{- if .Values.global.azure.keyVault.enabled }}
          namespace: {{ include "getExstreamReleaseNamespace" . }}
{{- end }}
          annotations:
{{ include "getExtraResourceAnnotations" (dict "dot" . "typeLabel" "pod") | nindent 12 }}
          labels:
{{ include "getExtraResourceLabels" (dict "dot" . "typeLabel" "pod") | nindent 12 }}
{{- if .Values.global.azure.keyVault.enabled }}
            azure.workload.identity/use: 'true'
{{- end }}
        spec:
          {{ include "getNodeSelector" .Values | nindent 10 }}
          {{ include "getServiceAccount" .Values | nindent 10 }}
          {{- include "imagePullSecrets" . | nindent 10 }}  
          securityContext:
            {{- include "sharedStorageRunAsIds" . | nindent 12 }}
          restartPolicy: Never
          initContainers: # intentionally blank. Istio/anthos cannot support init containers.
          containers:
            - name: {{ $containerName }}
              image: {{ $docgenDockerImage }}
              {{- include "imagePullPolicy" . | nindent 14 }}
              securityContext:
                {{- include "getReadOnlyRootFilesystemProperty" . | nindent 16 }}
                {{- include "getDefaultSecurityContextProperties" . | nindent 16 }}
              resources:
                {{ .Values.resources.cleanupCron | toYaml | indent 16 | trim }}
              terminationMessagePolicy: FallbackToLogsOnError
              volumeMounts:
              {{- if eq .Values.global.storage.shared.type "nfs"}}
              - mountPath: "/mnt/nfs"
                name: nfs-volume
              {{- end }}  
              {{- include "trustStoreVolumeMount" . | nindent 14 }}
              {{- include "extraSecretVolumeMount" . | nindent 14 }}
              {{- include "tempVolumeMount" . | nindent 14 }}
              envFrom:
              - configMapRef:
                  name: {{ .Release.Name }}-batch-config
              env:
                {{- include "getWaitForEndpointsVar" (dict "dot" . "pod" $podName "endpoints" (printf "%s/version" (include "BATCH_URL_ROOT_BACKEND" .) )) | nindent 16 }}
                {{- include "getShutdownEndpointsVar" (dict "dot" . "pod" $podName) | nindent 16 }}
                {{- include "getPodMetadataEnvVars" (dict "values" . "containerName" $containerName) | nindent 16 }}
                {{- include "getS3Properties" . | nindent 16 }}
                - name: EXSTREAM_CLEAN_UP
                  value: "true"
                - name: MY_POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                {{- include "oauthEnvSecretsCustomNames" (dict "dot" . "idName" "OAUTH2_CLIENT_ID" "secretName" "OAUTH2_CLIENT_SECRET" ) | nindent 16 }}
                {{- include "getVaultEnvVarsInEnvVars" (dict "Values" .Values "Release" .Release) | nindent 16 }}
                {{- include "trustStorePassword" . | nindent 16 }}
                {{- include "extraEnvironmentVars" .Values | nindent 16 }}
                {{- include "getAzureKeyVaultProperties" . | nindent 16 }}

            {{- include "extraContainers" (dict "dot" . "pod" $podName) | nindent 12 }}
          volumes:
{{ if eq .Values.global.storage.shared.type "nfs"}}
            - name: nfs-volume
{{ if .Values.global.storage.shared.local.enabled }}
              hostPath:
                path: {{required "global.storage.shared.local.path required" .Values.global.storage.shared.local.path}}
{{ else }}
              persistentVolumeClaim:
                claimName: {{ .Release.Name }}-shared-storage-pvc
{{ end }}
{{ end }}
            {{- include "trustStoreVolume" . | nindent 12 }}
            {{- include "extraSecretVolume" . | nindent 12 }}
            {{- include "tempVolume" . | nindent 12 }}
{{- end }}